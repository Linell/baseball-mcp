"""MCP Resources implementation for baseball data."""

from __future__ import annotations

import json
import logging
from typing import cast

import pandas as pd
from mcp.types import BlobResourceContents, TextResourceContents
from pydantic import AnyUrl
from sqlalchemy import text

from baseball_mcp.cache import Cache
from baseball_mcp.loaders.games import get_schedule
from baseball_mcp.loaders.teams import get_team_stats

logger = logging.getLogger(__name__)


class ResourceHandler:
    """Handler for MCP Resources."""

    def __init__(self, cache: Cache | None = None) -> None:
        """Initialize resource handler."""
        self.cache = cache or Cache()

    def get_resource(
        self, uri: str | AnyUrl
    ) -> TextResourceContents | BlobResourceContents:
        """Get resource by URI."""
        # Convert AnyUrl to string if necessary
        uri_str = str(uri) if isinstance(uri, AnyUrl) else uri

        if uri_str.startswith("team-season://"):
            return self._get_team_season_resource(uri_str)
        elif uri_str.startswith("stat-definitions://"):
            return self._get_stat_definitions_resource(uri_str)
        elif uri_str.startswith("cache://"):
            return self._get_cache_resource(uri_str)
        else:
            raise ValueError(f"Unknown resource URI: {uri_str}")

    def _get_team_season_resource(self, uri: str) -> TextResourceContents:
        """Get team-season resource package."""
        # Parse URI: team-season://TEAM/YEAR
        parts = uri.replace("team-season://", "").split("/")
        if len(parts) != 2:
            raise ValueError("team-season URI must be in format: team-season://TEAM/YEAR")

        team, year_str = parts
        try:
            year = int(year_str)
        except ValueError:
            raise ValueError(f"Invalid year: {year_str}") from None

        # Generate multipart package
        content = self._generate_team_season_package(team, year)

        return TextResourceContents(
            uri=cast(AnyUrl, uri),
            mimeType="text/markdown",
            text=content
        )

    def _get_stat_definitions_resource(self, uri: str) -> TextResourceContents:
        """Get stat definitions resource."""
        content = self._generate_stat_definitions()

        return TextResourceContents(
            uri=cast(AnyUrl, uri),
            mimeType="text/markdown",
            text=content
        )

    def _get_cache_resource(self, uri: str) -> TextResourceContents:
        """Get cache status resource."""
        if uri == "cache://status":
            content = self._generate_cache_status()
            return TextResourceContents(
                uri=cast(AnyUrl, uri),
                mimeType="application/json",
                text=content
            )
        else:
            raise ValueError(f"Unknown cache resource: {uri}")

    def _generate_team_season_package(self, team: str, year: int) -> str:
        """Generate a comprehensive team season package."""
        try:
            # Get team stats
            team_stats = get_team_stats(team, year, cache=self.cache)

            # Get schedule for the season
            schedule = get_schedule(
                team, f"{year}-03-01", f"{year}-10-31", cache=self.cache
            )

            # Generate overview
            team_stats_md = (team_stats.to_markdown(index=False)
                           if not team_stats.empty
                           else "No team statistics available")
            schedule_summary = f"""Total games: {len(schedule)}"""
            schedule_df = schedule
            wins = len(schedule[schedule.get("W/L", "") == "W"])
            losses = len(schedule[schedule.get("W/L", "") == "L"])
            win_pct = wins / len(schedule) if len(schedule) > 0 else 0
            schedule_md = (
                schedule.to_markdown(index=False)
                if not schedule.empty
                else "No schedule data available"
            )

            overview = f"""# {team.upper()} {year} Season Overview

## Team Statistics
{team_stats_md}

## Schedule Summary
{schedule_summary}

## Key Metrics
- Games Played: {len(schedule_df)}
- Record: {wins}-{losses}
- Winning Percentage: {win_pct:.3f}
"""

            content = f"""# {team.upper()} {year} Season Package

{overview}

## Complete Team Statistics

{team_stats_md}

## Full Schedule

{schedule_md}

---
*Generated by Baseball MCP Server*
"""

            return content

        except Exception as e:
            logger.error("Error generating team-season resource: %s", e)
            return f"Error generating team-season resource: {e}"

    def _generate_stat_definitions(self) -> str:
        """Generate comprehensive baseball statistics definitions."""
        return """# Baseball Statistics Definitions

## Batting Statistics

### Traditional Stats
- **AVG (Batting Average)**: Hits divided by at-bats
- **HR (Home Runs)**: Number of home runs hit
- **RBI (Runs Batted In)**: Number of runs driven in
- **R (Runs)**: Number of runs scored
- **H (Hits)**: Number of hits
- **2B (Doubles)**: Number of doubles
- **3B (Triples)**: Number of triples
- **BB (Walks)**: Number of bases on balls
- **SO (Strikeouts)**: Number of strikeouts
- **SB (Stolen Bases)**: Number of stolen bases

### Advanced Stats
- **OBP (On-Base Percentage)**: (H + BB + HBP) / (AB + BB + HBP + SF)
- **SLG (Slugging Percentage)**: Total bases divided by at-bats
- **OPS (On-Base Plus Slugging)**: OBP + SLG
- **wOBA (Weighted On-Base Average)**: Weighted measure of offensive production
- **wRC+ (Weighted Runs Created Plus)**: Offensive production adjusted for park
  and league

## Pitching Statistics

### Traditional Stats
- **ERA (Earned Run Average)**: Earned runs per 9 innings
- **W (Wins)**: Number of wins
- **L (Losses)**: Number of losses
- **SV (Saves)**: Number of saves
- **IP (Innings Pitched)**: Innings pitched
- **H (Hits Allowed)**: Number of hits allowed
- **BB (Walks Allowed)**: Number of walks allowed
- **SO (Strikeouts)**: Number of strikeouts recorded

### Advanced Stats
- **WHIP (Walks + Hits per Inning Pitched)**: (BB + H) / IP
- **FIP (Fielding Independent Pitching)**: Pitching performance independent of defense
- **K/9 (Strikeouts per 9 innings)**: SO / IP * 9
- **BB/9 (Walks per 9 innings)**: BB / IP * 9

## Statcast Metrics

### Hitting
- **Exit Velocity**: Speed of ball off bat (mph)
- **Launch Angle**: Angle of ball off bat (degrees)
- **xBA (Expected Batting Average)**: Expected batting average based on exit
  velocity and launch angle
- **xSLG (Expected Slugging)**: Expected slugging percentage
- **xwOBA (Expected wOBA)**: Expected weighted on-base average
- **Barrel Rate**: Percentage of batted balls that are "barrels" (ideal combo of
  exit velocity and launch angle)

### Pitching
- **Spin Rate**: Rotation rate of the ball (rpm)
- **Release Point**: Location where ball is released
- **Extension**: Distance from rubber to release point
- **Perceived Velocity**: How fast pitch appears to batter

## Fielding Statistics

- **DRS (Defensive Runs Saved)**: Runs saved/cost compared to average
- **UZR (Ultimate Zone Rating)**: Defensive value in runs above average
- **OAA (Outs Above Average)**: Statcast-based fielding metric
- **Fielding Percentage**: (PO + A) / (PO + A + E)

## Team Statistics

- **Pythagorean Record**: Expected record based on runs scored/allowed
- **Run Differential**: Runs scored minus runs allowed
- **Team ERA**: Earned run average for all pitchers
- **Team OPS**: On-base plus slugging for all hitters

---
*Baseball MCP Server Statistics Reference*
"""

    def _generate_cache_status(self) -> str:
        """Generate cache status information."""
        try:
            # Get cache statistics
            status = {
                "cache_location": str(self.cache.db_path),
                "cache_type": "SQLite",
                "timestamp": pd.Timestamp.now().isoformat(),
                "status": "active"
            }

            # Try to get table counts if possible
            try:
                with self.cache.Session() as session:
                    result = session.execute(
                        text("SELECT COUNT(*) FROM cache")
                    ).scalar()
                    status["total_entries"] = result
            except Exception:
                status["total_entries"] = "unknown"

            return json.dumps(status, indent=2)
        except Exception as e:
            return json.dumps({"error": str(e)}, indent=2)

    def list_resources(self) -> list[str]:
        """List available resource URIs."""
        return [
            "team-season://[TEAM]/[YEAR]",
            "stat-definitions://v1",
            "cache://status"
        ]
